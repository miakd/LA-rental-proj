colnames(outliers[1])="tract"
View(outliers)
colnames(outliers[1])
colnames(outliers[1])="tract"
colnames(outliers)
colnames(outliers[1])
colnames(outliers[1])="tract"
colnames(outliers[1])
outliers=data.frame(c(mergeLAshort$tract))
colnames(outliers)= c("tract")
View(outliers)
outliers$AvHpd=mergeLAshort$AvHpd
table(outliers$AvHpd) ##notice that the highest and lowest value are 50 and -50, and they each have 20 observations, so let's see what happens if we call these outliers
outliers$AvHpd[outliers$AvHpd>=50]=99
outliers$AvHpd[outliers$AvHpd<=-50]=-99
outliers$AvHpd[outliers$AvHpd!=99&outliers$AvHpd!=-99]="Normal"
outliers$AvHpd[outliers$AvHpd==99]="High"
outliers$AvHpd[outliers$AvHpd==-99]="Low"
outliers$AvLpd=mergeLAshort$AvLpd
outliers$AvLpd[outliers$AvLpd>=50]=99
outliers$AvLpd[outliers$AvLpd<=-50]=-99
outliers$AvLpd[outliers$AvLpd!=99&outliers$AvLpd!=-99]="Normal"
outliers$AvLpd[outliers$AvLpd==99]="High"
outliers$AvLpd[outliers$AvLpd==-99]="Low"
table(outliers$AvLpd==outliers$AvLpd) ##these all match up!
outliers$HvLpd=mergeLAshort$HvLpd
table(outliers$HvLpd)
outliers$HvLpd[outliers$HvLpd>=15]=999
outliers$HvLpd[outliers$HvLpd>=4&outliers$HvLpd<15]=99
outliers$HvLpd[outliers$HvLpd<=-4]=-99
outliers$HvLpd[outliers$HvLpd!=999&outliers$HvLpd!=99&outliers$HvLpd!=-99]="Normal"
outliers$HvLpd[outliers$HvLpd==999]="Very high"
outliers$HvLpd[outliers$HvLpd==99]="High"
outliers$HvLpd[outliers$HvLpd==-99]="Low"
table(outliers$HvLpd)
outliers$HRCvLRCpd=mergeLAshort$HRCvLRCpd
table(outliers$HRCvLRCpd)
outliers=data.frame(c(mergeLAshort$tract))
colnames(outliers)= c("tract")
outliers$AvHpd=mergeLAshort$AvHpd
table(outliers$AvHpd) ##notice that the highest and lowest value are 50 and -50, and they each have 20 observations, so let's see what happens if we call these outliers
outliers$AvHpd[outliers$AvHpd>=50]=99
outliers$AvHpd[outliers$AvHpd<=-50]=-99
outliers$AvHpd[outliers$AvHpd!=99&outliers$AvHpd!=-99]="Normal"
outliers$AvHpd[outliers$AvHpd==99]="High"
outliers$AvHpd[outliers$AvHpd==-99]="Low"
outliers$AvLpd=mergeLAshort$AvLpd
outliers$AvLpd[outliers$AvLpd>=50]=99
outliers$AvLpd[outliers$AvLpd<=-50]=-99
outliers$AvLpd[outliers$AvLpd!=99&outliers$AvLpd!=-99]="Normal"
outliers$AvLpd[outliers$AvLpd==99]="High"
outliers$AvLpd[outliers$AvLpd==-99]="Low"
table(outliers$AvLpd==outliers$AvLpd) ##these all match up!
outliers$HvLpd=mergeLAshort$HvLpd
table(outliers$HvLpd)
outliers$HvLpd[outliers$HvLpd>=15]=999
outliers$HvLpd[outliers$HvLpd>=4&outliers$HvLpd<15]=99
outliers$HvLpd[outliers$HvLpd<=-4]=-99
outliers$HvLpd[outliers$HvLpd!=999&outliers$HvLpd!=99&outliers$HvLpd!=-99]="Normal"
outliers$HvLpd[outliers$HvLpd==999]="Very high"
outliers$HvLpd[outliers$HvLpd==99]="High"
outliers$HvLpd[outliers$HvLpd==-99]="Low"
table(outliers$HvLpd)
outliers$HRCvLRCpd=mergeLAshort$HRCvLRCpd
table(outliers$HRCvLRCpd) #there are three outlier values.  one is extremely low (-1125.725), two are somewhat high (12.287 and 17.086)
outliers$HRCvLRCpd[outliers$HRCvLRCpd>=10]=99
outliers$HRCvLRCpd[outliers$HRCvLRCpd<=-10]=-99
outliers$HRCvLRCpd[outliers$HRCvLRCpd!=99&outliers$HRCvLRCpd!=-99]="Normal"
outliers$HRCvLRCpd[outliers$HRCvLRCpd==99]="High"
outliers$HRCvLRCpd[outliers$HRCvLRCpd==-99]="Low"
table(outliers$HRCvLRCpd==outliers$HRCvLRCpd)
table(outliers$AvLpd==outliers$HvLpd) ##these all match up!
outliers=data.frame(c(mergeLAshort$tract))
colnames(outliers)= c("tract")
outliers$AvHpd=mergeLAshort$AvHpd
table(outliers$AvHpd) ##notice that the highest and lowest value are 50 and -50, and they each have 20 observations, so let's see what happens if we call these outliers
outliers$AvHpd[outliers$AvHpd>=50]=99
outliers$AvHpd[outliers$AvHpd<=-50]=-99
outliers$AvHpd[outliers$AvHpd!=99&outliers$AvHpd!=-99]="Normal"
outliers$AvHpd[outliers$AvHpd==99]="High"
outliers$AvHpd[outliers$AvHpd==-99]="Low"
table(outliers$AvHpd) ##notice that the highest and lowest value are 50 and -50, and they each have 20 observations, so let's see what happens if we call these outliers
outliers$AvLpd=mergeLAshort$AvLpd
outliers$AvLpd[outliers$AvLpd>=50]=99
outliers$AvLpd[outliers$AvLpd<=-50]=-99
outliers$AvLpd[outliers$AvLpd!=99&outliers$AvLpd!=-99]="Normal"
outliers$AvLpd[outliers$AvLpd==99]="High"
outliers$AvLpd[outliers$AvLpd==-99]="Low"
table(outliers$AvLpd==outliers$AvLpd) ##these all match up!
outliers$HvLpd=mergeLAshort$HvLpd
table(outliers$HvLpd)
outliers$HvLpd[outliers$HvLpd>=15]=999
outliers$HvLpd[outliers$HvLpd>=4&outliers$HvLpd<15]=99
outliers$HvLpd[outliers$HvLpd<=-4]=-99
outliers$HvLpd[outliers$HvLpd!=999&outliers$HvLpd!=99&outliers$HvLpd!=-99]="Normal"
outliers$HvLpd[outliers$HvLpd==999]="Very high"
outliers$HvLpd[outliers$HvLpd==99]="High"
outliers$HvLpd[outliers$HvLpd==-99]="Low"
table(outliers$HvLpd)
outliers$HRCvLRCpd=mergeLAshort$HRCvLRCpd
outliers$HRCvLRCpd[outliers$HRCvLRCpd>=10]=99
outliers$HRCvLRCpd[outliers$HRCvLRCpd<=-10]=-99
outliers$HRCvLRCpd[outliers$HRCvLRCpd!=99&outliers$HRCvLRCpd!=-99]="Normal"
outliers$HRCvLRCpd[outliers$HRCvLRCpd==99]="High"
outliers$HRCvLRCpd[outliers$HRCvLRCpd==-99]="Low"
table(outliers$HRCvLRCpd) #there are three outlier values.  one is extremely low (-1125.725), two are somewhat high (12.287 and 17.086)
outliers$GEOID=paste0("0",outliers$tract)
outliers_df=merge(income_df, outliers, by.x="GEOID", by.y="GEOID")
outliers_merged <- geo_join(tracts, outliers_df, "GEOID", "GEOID")
library(tigris)
library(acs)
library(stringr)
library(dplyr)
library(leaflet)
library(htmltools)
library(mapview)
library(webshot)
library(htmlwidgets)
library(ggplot2)
outliers_merged <- geo_join(tracts, outliers_df, "GEOID", "GEOID")
outliers_merged <- outliers_merged[outliers_merged$ALAND>0,]
?colorFactor
pal <- colorFactor(
palette = "Blues",
domain = outliers_merged$AvLpd)
map6<-leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = income_merged3,
fillColor = ~pal(AvLpd),
color = "#b2aeae",
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2) %>%
addLegend(pal = pal,
values = income_merged3$AvLpd,
position = "bottomright",
title = "% difference outliers between ACS and LUPAMS")
map6<-leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = outliers_merged,
fillColor = ~pal(AvLpd),
color = "#b2aeae",
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2) %>%
addLegend(pal = pal,
values = income_merged3$AvLpd,
position = "bottomright",
title = "% difference outliers between ACS and LUPAMS")
map6
?labelFormat
map6<-leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = outliers_merged,
fillColor = ~pal(AvLpd),
color = "#b2aeae",
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2) %>%
addLegend(pal = pal,
values = income_merged3$AvLpd,
position = "bottomright",
title = "% difference outliers between ACS and LUPAMS",
labFormat = labelFormat())
map6
pal <- colorFactor(
palette = "Set3",
domain = outliers_merged$AvLpd)
map6<-leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = outliers_merged,
fillColor = ~pal(AvLpd),
color = "#b2aeae",
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2) %>%
addLegend(pal = pal,
values = income_merged3$AvLpd,
position = "bottomright",
title = "% difference outliers between ACS and LUPAMS",
labFormat = labelFormat())
map6
map6<-leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = outliers_merged,
fillColor = ~pal(AvLpd),
color = "#b2aeae",
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2) %>%
addLegend(pal = pal,
values = income_merged3$AvLpd,
position = "bottomright",
title = "% difference outliers between ACS and LUPAMS",
labFormat = labelFormat(suffix=""))
map6
?labelFormat
map6<-leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = outliers_merged,
fillColor = ~pal(AvLpd),
color = "#b2aeae",
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2) %>%
addLegend(pal = pal,
values = outliers_merged$AvLpd,
position = "bottomright",
title = "% difference outliers between ACS and LUPAMS",
labFormat = labelFormat(suffix=""))
map6
View(outliers)
View(outliers_df)
outliers_tmp=outliers
outliers_tmp$AvH_values=mergeLAshort$AvHpd
outliers_tmp$AvL_values=mergeLAshort$AvLpd
outliers_tmp[which(outliers_tmp$AvHpd=="Low"),]
outliers_tmp$AvH_values=NULL
outliers_tmp$AvL_values=NULL
outliers_tmp$acs_values=mergeLAshort$ACS_MFRENTALS
outliers_tmp$hcidla_values=mergeLAshort$HCIDLA
outliers_tmp$lupams_values=mergeLAshort$LUPAMS
outliers_tmp[which(outliers_tmp$AvHpd=="Low"),]
outliers_tmp[which(outliers_tmp$AvHpd=="High"),]
is.na(LArentals$ACS_MFRENTALS)
count(is.na(LArentals$ACS_MFRENTALS))
count(is.na(LArentals$LUPAMS))
count(is.na(LArentals$HCIDLA))
LArentals=read.csv("/users/miadawson/Documents/~UC Davis~/~ECI 289G/Final project/Palm-LosAngelesRentalCensus.csv")
LArentals$X=NULL
count(is.na(LArentals$ACS_MFRENTALS))
count(is.na(LArentals$LUPAMS))
View(LArentals)
count(is.na(LArentals$HCIDLA))
which(is.na[LArentals])
which(is.na(LArentals))
which(LArentals$ACS_MFRENTALS==0)
count(which(LArentals$ACS_MFRENTALS==0))
count(LArentals$ACS_MFRENTALS==0)
count(LArentals$HCIDLA==0)
count(LArentals$LUPAMS==0)
count(LArentals$ACS_MFRENTALS==0&LArentals$HCIDLA!=0)
count(LArentals$ACS_MFRENTALS==0&LArentals$LUPAMS!=0)
(LArentals$ACS_MFRENTALS==0&LArentals$HCIDLA!=0)==(LArentals$ACS_MFRENTALS==0&LArentals$LUPAMS!=0)
count((LArentals$ACS_MFRENTALS==0&LArentals$HCIDLA!=0)==(LArentals$ACS_MFRENTALS==0&LArentals$LUPAMS!=0))
library(devtools) #This needs to load before installing choroplethrCaCensusTract
library(ggplot2)
library(ggmap)
library(choroplethrCaCensusTract)
library(choroplethrCaCensusTract)
library(tigris)
library(acs) #See commented code
library(stringr)
library(dplyr)
library(leaflet)
library(htmltools)
library(mapview)
library(mapview)
library(webshot)
library(htmlwidgets)
outliers_tmp[which(outliers_tmp$AvHpd=="Low"),] #Identifies which census tracts had low percent difference
?gsub
outliers_tmp[which(outliers_tmp$AvHpd=="Low"),] #Identifies which census tracts had low percent difference
outliers_tmp$HRCvLRCpd=NULL
gsub("Low","ACS=0", outliers_tmp)
gsub("High", "LUPAMS/HCIDLA=0", outliers_tmp)
head(outliers_tmp)
View(outliers_tmp)
gsub("Low","ACS=0", outliers_tmp$AvHpd)
gsub("High", "LUPAMS/HCIDLA=0", outliers_tmp$AvHpd)
outliers_tmp$AvHpd=gsub("Low","ACS=0", outliers_tmp$AvHpd)
outliers_tmp$AvHpd=gsub("High", "LUPAMS/HCIDLA=0", outliers_tmp$AvHpd)
head(outliers_tmp)
outliers_tmp$HvLpd=NULL
outliers_tmp=gsub("Low","ACS=0", outliers_tmp) #replaces "low" with more descriptive name "ACS=0"
outliers_tmp=gsub("High", "LUPAMS/HCIDLA=0", outliers_tmp) #replaces "High" with more descriptive name "LUPAMS/HCIDLA=0"
head(outliers_tmp)
outliers_tmp=outliers #Create tmp copy of outliers so we can isolate specific census tracts
outliers_tmp$HRCvLRCpd=NULL
outliers_tmp$HvLpd=NULL
outliers_tmp$acs_values=mergeLAshort$ACS_MFRENTALS #create new column with ACS data
outliers_tmp$hcidla_values=mergeLAshort$HCIDLA #create new column with HCIDLA data
outliers_tmp$lupams_values=mergeLAshort$LUPAMS #create new column with LUPAMS data
outliers_tmp[which(outliers_tmp$AvHpd=="Low"),] #Identifies which census tracts had low percent difference
outliers_tmp[which(outliers_tmp$AvHpd=="High"),] #Identifies which census tracts had high percent difference
outliers_tmp$AvHpd=gsub("Low","ACS=0", outliers_tmp$AvHpd) #replaces "low" with more descriptive name "ACS=0"
outliers_tmp$AvHpd=gsub("High", "LUPAMS/HCIDLA=0", outliers_tmp$AvHpd) #replaces "High" with more descriptive name "LUPAMS/HCIDLA=0"
head(outliers_tmp)
outliers_tmp$AvLpd=gsub("Low","ACS=0", outliers_tmp$AvLpd) #replaces "low" with more descriptive name "ACS=0"
outliers_tmp$AvLpd=gsub("High", "LUPAMS/HCIDLA=0", outliers_tmp$AvLpd) #replaces "High" with more descriptive name "LUPAMS/HCIDLA=0"
head(outliers_tmp)
outliers_df=merge(income_df, outliers_tmp, by.x="GEOID", by.y="GEOID") #Merges outlier data with income data by GEOID
outliers_merged <- geo_join(tracts, outliers_df, "GEOID", "GEOID") #Adds spatial data to the new outliers & income data set
outliers_merged <- outliers_merged[outliers_merged$ALAND>0,] #excludes tracts with no land
pal <- colorFactor(
palette = "Set3",
domain = outliers_merged$AvLpd)
map7<-leaflet(width = "100%", height = "800px") %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = outliers_merged,  #adds data from outliers_merged
fillColor = ~pal(AvLpd), #Tells leaflet to use AvLpd column when adding the color palette
color = "#b2aeae",
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2) %>%
addLegend(pal = pal, #Adds a map legend
values = outliers_merged$AvLpd,  #Adds data source to map legend
position = "bottomright", #positions legend in bottomright
title = "% difference outliers between ACS and LUPAMS", #Adds legend title
labFormat = labelFormat(suffix=""))  #removes data label
map7 #outliers AvLpd and AvHpd are identical, so we only need to make one map
pal <- colorFactor(
palette = "Set3",
domain = outliers_merged$AvLpd)
map7<-leaflet(width = "100%", height = "800px") %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = outliers_merged,  #adds data from outliers_merged
fillColor = ~pal(AvLpd), #Tells leaflet to use AvLpd column when adding the color palette
color = "#b2aeae",
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2) %>%
addLegend(pal = pal, #Adds a map legend
values = outliers_merged$AvLpd,  #Adds data source to map legend
position = "bottomright", #positions legend in bottomright
title = "% difference outliers between ACS and LUPAMS", #Adds legend title
labFormat = labelFormat(suffix=""))  #removes data label
map7 #outliers AvLpd and AvHpd are identical, so we only need to make one map
pal <- colorNumeric(
palette = "Blues",
domain = income_merged2$pct_bl)
map6<-leaflet(width = "100%", height = "800px") %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = income_merged2,  #adds data from income_merged2
fillColor = ~pal(pct_bl), #Tells leaflet to use pct_bl column when adding the color palette
color = "#b2aeae",
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2) %>%
addLegend(pal = pal, #Adds a map legend
values = income_merged2$pct_bl,  #Adds data source to map legend
position = "bottomright", #positions legend in bottomright
title = "Percent Black & Latinx Population", #Adds legend title
labFormat = labelFormat(suffix = "%")) #Adds data label
map6 #Percent Black & Latinx population
pal <- colorNumeric(
palette = "Blues",
domain = income_merged2$pct_asian)
map5<-leaflet(width = "100%", height = "800px") %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = income_merged2,  #adds data from income_merged2
fillColor = ~pal(pct_asian), #Tells leaflet to use pct_asian column when adding the color palette
color = "#b2aeae",
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2) %>%
addLegend(pal = pal, #Adds a map legend
values = income_merged2$pct_asian,  #Adds data source to map legend
position = "bottomright", #positions legend in bottomright
title = "Percent Black Population", #adds legend title
labFormat = labelFormat(suffix = "%")) #adds data label
map5 #Percent asian population
pal <- colorNumeric(
palette = "BrBG",
domain = income_merged2$AvHpd)
map4<-leaflet(width = "100%", height = "800px") %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = income_merged2,  #adds data from income_merged2
fillColor = ~pal(AvHpd), #Tells leaflet to use AvHpd column when adding the color palette
color = "#b2aeae",
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2) %>%
addLegend(pal = pal, #Adds a map legend
values = income_merged2$AvHpd,  #Adds data source to map legend
position = "bottomright", #positions legend in bottomright
title = "Percent difference between ACS and HCIDLA", #adds legend title
labFormat = labelFormat(suffix = "%"))  #adds data label
map4 #Percent difference between ACS and HCIDLA
pal <- colorFactor(
palette = "PRGn",
domain = outliers_merged$AvLpd)
map7<-leaflet(width = "100%", height = "800px") %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = outliers_merged,  #adds data from outliers_merged
fillColor = ~pal(AvLpd), #Tells leaflet to use AvLpd column when adding the color palette
color = "#b2aeae",
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2) %>%
addLegend(pal = pal, #Adds a map legend
values = outliers_merged$AvLpd,  #Adds data source to map legend
position = "bottomright", #positions legend in bottomright
title = "% difference outliers between ACS and LUPAMS", #Adds legend title
labFormat = labelFormat(suffix=""))  #removes data label
map7 #outliers AvLpd and AvHpd are identical, so we only need to make one map
pal <- colorFactor(
palette = "Pastel1",
domain = outliers_merged$AvLpd)
map7<-leaflet(width = "100%", height = "800px") %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = outliers_merged,  #adds data from outliers_merged
fillColor = ~pal(AvLpd), #Tells leaflet to use AvLpd column when adding the color palette
color = "#b2aeae",
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2) %>%
addLegend(pal = pal, #Adds a map legend
values = outliers_merged$AvLpd,  #Adds data source to map legend
position = "bottomright", #positions legend in bottomright
title = "% difference outliers between ACS and LUPAMS", #Adds legend title
labFormat = labelFormat(suffix=""))  #removes data label
map7 #outliers AvLpd and AvHpd are identical, so we only need to make one map
levels(outliers_tmp$AvLpd)
table(outliers_tmp$AvLpd)
factor(outliers_tmp$AvLpd)
levels(outliers_tmp$AvLpd)
table(outliers_tmp$AvLpd)
str(outliers_tmp$AvLpd)
str(as.factor(outliers_tmp$AvLpd))
outliers_tmp$AvLpd=as.factor(outliers_tmp$AvLpd)
levels(outliers_tmp$AvLpd)
levels(outliers_tmp$AvLpd)=c("ACS=0", "Normal", "LUPAMS/HCIDLA=0")
levels(outliers_tmp$AvLpd)
tables(outliers_tmp$AvLpd)
table(outliers_tmp$AvLpd)
outliers_tmp=outliers #Create tmp copy of outliers so we can isolate specific census tracts
outliers_tmp$HRCvLRCpd=NULL #remove row we do not need
outliers_tmp$HvLpd=NULL #remove row we do not need
outliers_tmp$acs_values=mergeLAshort$ACS_MFRENTALS #create new column with ACS data
outliers_tmp$hcidla_values=mergeLAshort$HCIDLA #create new column with HCIDLA data
outliers_tmp$lupams_values=mergeLAshort$LUPAMS #create new column with LUPAMS data
outliers_tmp[which(outliers_tmp$AvHpd=="Low"),] #Identifies which census tracts had low percent difference
outliers_tmp[which(outliers_tmp$AvHpd=="High"),] #Identifies which census tracts had high percent difference
outliers_tmp$AvHpd=gsub("Low","ACS=0", outliers_tmp$AvHpd) #replaces "low" with more descriptive name "ACS=0"
outliers_tmp$AvHpd=gsub("High", "LUPAMS/HCIDLA=0", outliers_tmp$AvHpd) #replaces "High" with more descriptive name "LUPAMS/HCIDLA=0"
outliers_tmp$AvLpd=gsub("Low","ACS=0", outliers_tmp$AvLpd) #replaces "low" with more descriptive name "ACS=0"
outliers_tmp$AvLpd=gsub("High", "LUPAMS/HCIDLA=0", outliers_tmp$AvLpd) #replaces "High" with more descriptive name "LUPAMS/HCIDLA=0"
outliers_tmp$AvLpd=factor(outliers_tmp$AvLpd, levels = c("ACS=0", "Normal", "LUPAMS/HCIDLA=0"))
str(outliers_tmp$AvLpd)
table(outliers_tmp$AvLpd)
outliers_tmp$AvHpd=factor(outliers_tmp$AvHpd, levels = c("ACS=0", "Normal", "LUPAMS/HCIDLA=0")) #change order of levels
outliers_tmp$AvLpd=factor(outliers_tmp$AvLpd, levels = c("ACS=0", "Normal", "LUPAMS/HCIDLA=0")) #change order of levels
outliers_df=merge(income_df, outliers_tmp, by.x="GEOID", by.y="GEOID") #Merges outlier data with income data by GEOID
outliers_merged <- geo_join(tracts, outliers_df, "GEOID", "GEOID") #Adds spatial data to the new outliers & income data set
outliers_merged <- outliers_merged[outliers_merged$ALAND>0,] #excludes tracts with no land
pal <- colorFactor(
palette = "PRGn",
domain = outliers_merged$AvLpd)
map7<-leaflet(width = "100%", height = "800px") %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = outliers_merged,  #adds data from outliers_merged
fillColor = ~pal(AvLpd), #Tells leaflet to use AvLpd column when adding the color palette
color = "#b2aeae",
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2) %>%
addLegend(pal = pal, #Adds a map legend
values = outliers_merged$AvLpd,  #Adds data source to map legend
position = "bottomright", #positions legend in bottomright
title = "% difference outliers between ACS and LUPAMS", #Adds legend title
labFormat = labelFormat(suffix=""))  #removes data label
map7 #outliers AvLpd and AvHpd are identical, so we only need to make one map
pal <- colorFactor(
palette = "PiYG",
domain = outliers_merged$AvLpd)
map7<-leaflet(width = "100%", height = "800px") %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = outliers_merged,  #adds data from outliers_merged
fillColor = ~pal(AvLpd), #Tells leaflet to use AvLpd column when adding the color palette
color = "#b2aeae",
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2) %>%
addLegend(pal = pal, #Adds a map legend
values = outliers_merged$AvLpd,  #Adds data source to map legend
position = "bottomright", #positions legend in bottomright
title = "% difference outliers between ACS and LUPAMS", #Adds legend title
labFormat = labelFormat(suffix=""))  #removes data label
map7 #outliers AvLpd and AvHpd are identical, so we only need to make one map
pal <- colorFactor(
palette = "PiYG",
domain = outliers_merged$AvLpd)
map7<-leaflet(width = "100%", height = "800px") %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = outliers_merged,  #adds data from outliers_merged
fillColor = ~pal(AvLpd), #Tells leaflet to use AvLpd column when adding the color palette
color = "#b2aeae",
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2) %>%
addLegend(pal = pal, #Adds a map legend
values = outliers_merged$AvLpd,  #Adds data source to map legend
position = "bottomright", #positions legend in bottomright
title = "Unmatched zeroes (ACS versus LUPAMS/HCIDLA)", #Adds legend title
labFormat = labelFormat(suffix=""))  #removes data label
saveWidget(map7, "zeroes.html", selfcontained = FALSE)
map7<-leaflet(width = "100%", height = "800px") %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = outliers_merged,  #adds data from outliers_merged
fillColor = ~pal(AvLpd), #Tells leaflet to use AvLpd column when adding the color palette
color = "#b2aeae",
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2) %>%
addLegend(pal = pal, #Adds a map legend
values = outliers_merged$AvLpd,  #Adds data source to map legend
position = "bottomright", #positions legend in bottomright
title = "Unmatched zeroes", #Adds legend title
labFormat = labelFormat(suffix=""))  #removes data label
saveWidget(map7, "zeroes.html", selfcontained = FALSE)
savehistory("~/Documents/Programming/Gitstuff/LAhousing/ECI289G_finalproj_dawson_history2.Rhistory")
